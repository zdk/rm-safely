#!/usr/bin/env bash

VERSION="1.3.2"
HOOK_FILE="$HOME/.rm-safely"
TRASH_DIR="$HOME/.local/share/Trash"
TRASH_FILES="$TRASH_DIR/files"
TRASH_INFO="$TRASH_DIR/info"

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

detect_shell() {
    case "$SHELL" in
    *zsh*) SHELL_CONFIG="$HOME/.zshrc" ;;
    *) SHELL_CONFIG="$HOME/.bashrc" ;;
    esac
}

create_hook_file() {
    cat >"$HOOK_FILE" <<'EOF'
# rm-safely - rm alias that moves files to a trash directory before deletion

VERSION="1.3.2"
TRASH_DIR="$HOME/.local/share/Trash"
TRASH_FILES="$TRASH_DIR/files"
TRASH_INFO="$TRASH_DIR/info"

# Ensure trash directories exist
mkdir -p "$TRASH_FILES" "$TRASH_INFO" 2>/dev/null

rm() {
    case "$1" in
        --rm)
            shift
            /bin/rm "$@"
            ;;
        --empty-trash)
            /bin/rm -rf "$TRASH_FILES"/* "$TRASH_INFO"/*
            echo "Trash emptied"
            ;;
        --list-trash)
            if [ -d "$TRASH_FILES" ] && [ -n "$(ls -A "$TRASH_FILES" 2>/dev/null)" ]; then
                echo "Trash Contents:"
                echo "==============="
                for file in "$TRASH_FILES"/*; do
                    [ -e "$file" ] || continue
                    basename="$(basename "$file")"
                    info_file="$TRASH_INFO/${basename}.info"
                    if [ -f "$info_file" ]; then
                        original_path=$(cat "$info_file" 2>/dev/null)
                        printf "%-40s -> %s\n" "$basename" "$original_path"
                    else
                        echo "$basename"
                    fi
                done
            else
                echo "Trash is empty"
            fi
            ;;
        --show-trash-path)
            echo "$TRASH_DIR"
            ;;
        --version)
            echo "rm-safely version $VERSION"
            ;;
        --help)
            cat <<HELP
rm-safely - Files moved to \$HOME/.local/share/Trash/files before deletion
Usage: rm [options] [files...]
Special options:
  --rm              Skip trash, execute real 'rm'
  --list-trash      Show trash contents
  --empty-trash     Empty the trash
  --show-trash-path Display the trash directory path
  --version         Show version information
  --help            Show this help
HELP
            ;;
        *)
            if ! [ -w "$TRASH_FILES" ]; then
                echo "ERROR: Cannot write to: $TRASH_FILES"
                return 1
            fi

            local failed=0
            for arg in "$@"; do

                [[ "$arg" == -* ]] && continue

                if [ ! -e "$arg" ] && [ ! -L "$arg" ]; then
                    echo "rm: cannot remove '$arg': No such file or directory"
                    failed=1
                    continue
                fi

                basename=$(basename "$arg")
                trash_name="${basename}_$(date +%s%N)"

                if [[ "$arg" = /* ]]; then
                    absolute_path="$arg"
                else
                    absolute_path="$(pwd)/$arg"
                fi

                if mv "$arg" "$TRASH_FILES/$trash_name" 2>/dev/null; then
                    echo "$absolute_path" > "$TRASH_INFO/${trash_name}.info"
                    [ -d "$TRASH_FILES/$trash_name" ] && echo "Moved directory '$arg' to trash" || echo "Moved '$arg' to trash"
                else
                    echo "ERROR: Failed to move '$arg' to trash"
                    failed=1
                fi
            done

            if [ $failed -eq 0 ]; then
                /bin/rm "$@" 2>/dev/null || true
            fi
 
            return $failed
            ;;
    esac
}

export -f rm
EOF
}

install_hook() {
    detect_shell
    print_info "Installing rm-safely hook..."
    create_hook_file

    if ! grep -q "source.*\.rm-safely" "$SHELL_CONFIG" 2>/dev/null; then
        echo -e "\n# rm-safely - Safe rm command\nsource \"$HOOK_FILE\" >/dev/null 2>&1" >>"$SHELL_CONFIG"
        print_info "Added hook to $SHELL_CONFIG"
    else
        print_warning "Hook already exists in $SHELL_CONFIG"
    fi

    print_info "Installation complete!"
    print_warning "Restart your terminal or run 'source $SHELL_CONFIG' to activate"
}

uninstall_hook() {
    detect_shell
    print_info "Uninstalling rm-safely hook..."

    [ -f "$HOOK_FILE" ] && rm "$HOOK_FILE" && print_info "Removed hook file"

    if [ -f "$SHELL_CONFIG" ]; then
        sed -i.bak '/# rm-safely - Safe rm command/,+1d' "$SHELL_CONFIG"
        rm "${SHELL_CONFIG}.bak" 2>/dev/null
        print_info "Removed hook from $SHELL_CONFIG"
    fi

    print_info "Uninstallation complete!"
    print_warning "Restart your terminal to fully remove the hook"
}

status_hook() {
    detect_shell
    echo "rm-safely status:"
    echo "================="

    [ -f "$HOOK_FILE" ] && print_info "Hook file exists" || print_error "Hook file not found"

    if grep -q "source.*\.rm-safely" "$SHELL_CONFIG" 2>/dev/null; then
        print_info "Hook is enabled in $SHELL_CONFIG"
    else
        print_error "Hook not found in $SHELL_CONFIG"
    fi

    if type rm | grep -q "function"; then
        print_info "rm function is active"
        echo "Trash directory: $TRASH_DIR"
        if [ -d "$TRASH_FILES" ]; then
            file_count=$(find "$TRASH_FILES" -type f 2>/dev/null | wc -l)
            echo "Files in trash: $file_count"
        fi
    else
        print_warning "rm function is not active"
    fi
}

case "${1:-}" in
install) install_hook ;;
uninstall) uninstall_hook ;;
status) status_hook ;;
version) echo "rm-safely version $VERSION" ;;
*)
    cat <<USAGE
rm-safely Installer
===================

Usage: $0 {install|uninstall|status|version}

Commands:
  install    Install the rm-safely hook
  uninstall  Remove the rm-safely hook
  status     Show installation status
  version    Show version information

The hook intercepts 'rm' commands and moves files to ~/.local/share/Trash
instead of permanently deleting them.
USAGE
    ;;
esac
